{"ast":null,"code":"import { toast } from 'react-hot-toast';\nexport async function validateuser(values) {\n  const errors = verifyusername({}, values);\n  return errors;\n}\nfunction verifyusername() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.username) {\n    error.username = toast.error(\"Username required..\");\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Username cannot be empty\");\n  }\n  return error;\n}\nexport function validatepassword(values) {\n  const errors = verifypassword({}, values);\n  return errors;\n}\nfunction verifypassword() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  let specialchar = /[-’/`~!#*$@_%+=.,^&(){}[\\]|;:”<>?\\\\]/g;\n  if (!values.password) {\n    error.password = toast.error(\"Password required..\");\n  } else if (values.password.includes(\" \")) {\n    error.password = toast.error(\"Password cannot be empty\");\n  } else if (values.password.length < 4) {\n    error.password = toast.error(\"Password must be more than 4 letters\");\n  } else if (!specialchar.test(values.password)) {\n    error.password = toast.error(\"Password must contain atleast one special character\");\n  }\n  return error;\n}\n\n/*verify reset */\n\nexport async function resetpassword(values) {\n  const errors = verifypassword({}, values);\n  if (values.password !== values.confpassword) {\n    toast.error('Confirm password does not match');\n  }\n  return errors;\n}","map":{"version":3,"names":["toast","validateuser","values","errors","verifyusername","error","arguments","length","undefined","username","includes","validatepassword","verifypassword","specialchar","password","test","resetpassword","confpassword"],"sources":["/home/prakashgokul/Documents/mern/login app/client/src/helper/validate.js"],"sourcesContent":["import { toast} from 'react-hot-toast';\n\n\nexport async  function validateuser(values) {\n  \n   const errors= verifyusername({},values)\n  return errors;\n}\n\n function verifyusername(error={},values) {\n  if (!values.username){\n    error.username=toast.error(\"Username required..\")\n  }else if(values.username.includes(\" \")){\n    error.username=toast.error(\"Username cannot be empty\")\n  }\n\n  \n  return error;\n}\n\n\n\nexport  function validatepassword(values) {\n  const errors= verifypassword({},values)\n  return errors;\n \n}\nfunction verifypassword(error={},values) {\nlet specialchar=/[-’/`~!#*$@_%+=.,^&(){}[\\]|;:”<>?\\\\]/g\n\n  if (!values.password){\n    error.password=toast.error(\"Password required..\")\n  }else if(values.password.includes(\" \")){\n    error.password=toast.error(\"Password cannot be empty\")\n  }else if(values.password.length < 4){\n    error.password=toast.error(\"Password must be more than 4 letters\")\n    \n  }else if(!specialchar.test(values.password))\n  {\n    error.password=toast.error(\"Password must contain atleast one special character\")\n  }\n\n  \n  return error;\n}\n\n\n/*verify reset */\n\nexport async function resetpassword(values){\n\n  const errors= verifypassword({},values)\n\n  if (values.password!== values.confpassword){\n      toast.error('Confirm password does not match')\n  }\n  return errors;\n}\n\n\n\n\n"],"mappings":"AAAA,SAASA,KAAK,QAAO,iBAAiB;AAGtC,OAAO,eAAgBC,YAAYA,CAACC,MAAM,EAAE;EAEzC,MAAMC,MAAM,GAAEC,cAAc,CAAC,CAAC,CAAC,EAACF,MAAM,CAAC;EACxC,OAAOC,MAAM;AACf;AAEC,SAASC,cAAcA,CAAA,EAAkB;EAAA,IAAjBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,CAAC,CAAC;EAAA,IAACJ,MAAM,GAAAI,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACtC,IAAI,CAACN,MAAM,CAACO,QAAQ,EAAC;IACnBJ,KAAK,CAACI,QAAQ,GAACT,KAAK,CAACK,KAAK,CAAC,qBAAqB,CAAC;EACnD,CAAC,MAAK,IAAGH,MAAM,CAACO,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAC;IACrCL,KAAK,CAACI,QAAQ,GAACT,KAAK,CAACK,KAAK,CAAC,0BAA0B,CAAC;EACxD;EAGA,OAAOA,KAAK;AACd;AAIA,OAAQ,SAASM,gBAAgBA,CAACT,MAAM,EAAE;EACxC,MAAMC,MAAM,GAAES,cAAc,CAAC,CAAC,CAAC,EAACV,MAAM,CAAC;EACvC,OAAOC,MAAM;AAEf;AACA,SAASS,cAAcA,CAAA,EAAkB;EAAA,IAAjBP,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,CAAC,CAAC;EAAA,IAACJ,MAAM,GAAAI,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACvC,IAAIK,WAAW,GAAC,uCAAuC;EAErD,IAAI,CAACX,MAAM,CAACY,QAAQ,EAAC;IACnBT,KAAK,CAACS,QAAQ,GAACd,KAAK,CAACK,KAAK,CAAC,qBAAqB,CAAC;EACnD,CAAC,MAAK,IAAGH,MAAM,CAACY,QAAQ,CAACJ,QAAQ,CAAC,GAAG,CAAC,EAAC;IACrCL,KAAK,CAACS,QAAQ,GAACd,KAAK,CAACK,KAAK,CAAC,0BAA0B,CAAC;EACxD,CAAC,MAAK,IAAGH,MAAM,CAACY,QAAQ,CAACP,MAAM,GAAG,CAAC,EAAC;IAClCF,KAAK,CAACS,QAAQ,GAACd,KAAK,CAACK,KAAK,CAAC,sCAAsC,CAAC;EAEpE,CAAC,MAAK,IAAG,CAACQ,WAAW,CAACE,IAAI,CAACb,MAAM,CAACY,QAAQ,CAAC,EAC3C;IACET,KAAK,CAACS,QAAQ,GAACd,KAAK,CAACK,KAAK,CAAC,qDAAqD,CAAC;EACnF;EAGA,OAAOA,KAAK;AACd;;AAGA;;AAEA,OAAO,eAAeW,aAAaA,CAACd,MAAM,EAAC;EAEzC,MAAMC,MAAM,GAAES,cAAc,CAAC,CAAC,CAAC,EAACV,MAAM,CAAC;EAEvC,IAAIA,MAAM,CAACY,QAAQ,KAAIZ,MAAM,CAACe,YAAY,EAAC;IACvCjB,KAAK,CAACK,KAAK,CAAC,iCAAiC,CAAC;EAClD;EACA,OAAOF,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}