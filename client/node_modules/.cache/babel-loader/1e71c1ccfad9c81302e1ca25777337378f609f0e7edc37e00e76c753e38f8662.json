{"ast":null,"code":"import { toast } from 'react-hot-toast';\nexport function validateuser(values) {\n  const errors = verifyusername({}, values);\n  return errors;\n}\nfunction verifyusername() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.username) {\n    error.username = toast.error(\"Username required..\");\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Username cannot be empty\");\n  }\n  return error;\n}\nexport function validatepassword(vali) {\n  const errors = verifypassword({}, values);\n  return errors;\n}\nfunction verifypassword() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.password) {\n    error.password = toast.error(\"Password required..\");\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Password cannot be empty\");\n  }\n  return error;\n}","map":{"version":3,"names":["toast","validateuser","values","errors","verifyusername","error","arguments","length","undefined","username","includes","validatepassword","vali","verifypassword","password"],"sources":["/home/prakashgokul/Documents/Mern/login app/client/src/helper/validate.js"],"sourcesContent":["import { toast} from 'react-hot-toast';\n\n\nexport  function validateuser(values) {\n  \n   const errors= verifyusername({},values)\n  return errors;\n}\n\n function verifyusername(error={},values) {\n  if (!values.username){\n    error.username=toast.error(\"Username required..\")\n  }else if(values.username.includes(\" \")){\n    error.username=toast.error(\"Username cannot be empty\")\n  }\n\n  \n  return error;\n}\n\n\n\nexport  function validatepassword(vali) {\n  const errors= verifypassword({},values)\n  return errors;\n \n}\nfunction verifypassword(error={},values) {\n  if (!values.password){\n    error.password=toast.error(\"Password required..\")\n  }else if(values.username.includes(\" \")){\n    error.username=toast.error(\"Password cannot be empty\")\n  }\n\n  \n  return error;\n}\n\n"],"mappings":"AAAA,SAASA,KAAK,QAAO,iBAAiB;AAGtC,OAAQ,SAASC,YAAYA,CAACC,MAAM,EAAE;EAEnC,MAAMC,MAAM,GAAEC,cAAc,CAAC,CAAC,CAAC,EAACF,MAAM,CAAC;EACxC,OAAOC,MAAM;AACf;AAEC,SAASC,cAAcA,CAAA,EAAkB;EAAA,IAAjBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,CAAC,CAAC;EAAA,IAACJ,MAAM,GAAAI,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACtC,IAAI,CAACN,MAAM,CAACO,QAAQ,EAAC;IACnBJ,KAAK,CAACI,QAAQ,GAACT,KAAK,CAACK,KAAK,CAAC,qBAAqB,CAAC;EACnD,CAAC,MAAK,IAAGH,MAAM,CAACO,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAC;IACrCL,KAAK,CAACI,QAAQ,GAACT,KAAK,CAACK,KAAK,CAAC,0BAA0B,CAAC;EACxD;EAGA,OAAOA,KAAK;AACd;AAIA,OAAQ,SAASM,gBAAgBA,CAACC,IAAI,EAAE;EACtC,MAAMT,MAAM,GAAEU,cAAc,CAAC,CAAC,CAAC,EAACX,MAAM,CAAC;EACvC,OAAOC,MAAM;AAEf;AACA,SAASU,cAAcA,CAAA,EAAkB;EAAA,IAAjBR,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,CAAC,CAAC;EAAA,IAACJ,MAAM,GAAAI,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACrC,IAAI,CAACN,MAAM,CAACY,QAAQ,EAAC;IACnBT,KAAK,CAACS,QAAQ,GAACd,KAAK,CAACK,KAAK,CAAC,qBAAqB,CAAC;EACnD,CAAC,MAAK,IAAGH,MAAM,CAACO,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAC;IACrCL,KAAK,CAACI,QAAQ,GAACT,KAAK,CAACK,KAAK,CAAC,0BAA0B,CAAC;EACxD;EAGA,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}