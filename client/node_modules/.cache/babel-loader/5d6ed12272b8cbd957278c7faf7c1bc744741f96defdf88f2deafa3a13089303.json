{"ast":null,"code":"import { toast } from 'react-hot-toast';\nimport { authenticate } from './helper';\nexport async function validateuser(values) {\n  const errors = verifyusername({}, values);\n  if (values.username) {\n    // check user exist or not\n    const {\n      status\n    } = await authenticate(values.username);\n    if (status !== 200) {\n      errors.exist = toast.error('User does not exist...!');\n    }\n  }\n  return errors;\n}\nfunction verifyusername() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.username) {\n    error.username = toast.error(\"Username required..\");\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Username cannot be empty\");\n  }\n  return error;\n}\nexport function validatepassword(values) {\n  const errors = verifypassword({}, values);\n  return errors;\n}\nfunction verifypassword() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  let specialchar = /[-’/`~!#*$@_%+=.,^&(){}[\\]|;:”<>?\\\\]/g;\n  if (!values.password) {\n    error.password = toast.error(\"Password required..\");\n  } else if (values.password.includes(\" \")) {\n    error.password = toast.error(\"Password cannot be empty\");\n  } else if (values.password.length < 4) {\n    error.password = toast.error(\"Password must be more than 4 letters\");\n  } else if (!specialchar.test(values.password)) {\n    error.password = toast.error(\"Password must contain atleast one special character\");\n  }\n  return error;\n}\n\n/*verify reset */\n\nexport async function resetpassword(values) {\n  const errors = verifypassword({}, values);\n  if (values.password !== values.confpassword) {\n    toast.error('Confirm password does not match');\n  }\n  return errors;\n}\n\n/* verify register*/\n\nexport async function registerValidation(values) {\n  const errors = verifyusername({}, values);\n  verifypassword(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\n\n/** validate profile page */\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}\n\n/** validate email */\nfunction emailVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.email) {\n    error.email = toast.error(\"Email Required...!\");\n  } else if (values.email.includes(\" \")) {\n    error.email = toast.error(\"Wrong Email...!\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    error.email = toast.error(\"Invalid email address...!\");\n  }\n  return error;\n}","map":{"version":3,"names":["toast","authenticate","validateuser","values","errors","verifyusername","username","status","exist","error","arguments","length","undefined","includes","validatepassword","verifypassword","specialchar","password","test","resetpassword","confpassword","registerValidation","emailVerify","profileValidation","email"],"sources":["/home/prakashgokul/Documents/mern/login app/client/src/helper/validate.js"],"sourcesContent":["import { toast} from 'react-hot-toast';\nimport { authenticate } from './helper'\n\n\nexport async  function validateuser(values) {\n  \n   const errors= verifyusername({},values)\n\n   if(values.username){\n    // check user exist or not\n    const { status } = await authenticate(values.username);\n    \n    if(status !== 200){\n        errors.exist = toast.error('User does not exist...!')\n    }\n}\n\n  return errors;\n}\n\n function verifyusername(error={},values) {\n  if (!values.username){\n    error.username=toast.error(\"Username required..\")\n  }else if(values.username.includes(\" \")){\n    error.username=toast.error(\"Username cannot be empty\")\n  }\n\n  \n  return error;\n}\n\n\n\nexport  function validatepassword(values) {\n  const errors= verifypassword({},values)\n  return errors;\n \n}\nfunction verifypassword(error={},values) {\nlet specialchar=/[-’/`~!#*$@_%+=.,^&(){}[\\]|;:”<>?\\\\]/g\n\n  if (!values.password){\n    error.password=toast.error(\"Password required..\")\n  }else if(values.password.includes(\" \")){\n    error.password=toast.error(\"Password cannot be empty\")\n  }else if(values.password.length < 4){\n    error.password=toast.error(\"Password must be more than 4 letters\")\n    \n  }else if(!specialchar.test(values.password))\n  {\n    error.password=toast.error(\"Password must contain atleast one special character\")\n  }\n\n  \n  return error;\n}\n\n\n/*verify reset */\n\nexport async function resetpassword(values){\n\n  const errors= verifypassword({},values)\n\n  if (values.password!== values.confpassword){\n      toast.error('Confirm password does not match')\n  }\n  return errors;\n}\n\n/* verify register*/\n\nexport async function registerValidation(values){\n  const errors = verifyusername({}, values);\n  verifypassword(errors, values);\n  emailVerify(errors, values);\n\n  return errors;\n}\n\n/** validate profile page */\nexport async function profileValidation(values){\n  const errors = emailVerify({}, values);\n  return errors;\n}\n\n/** validate email */\nfunction emailVerify(error ={}, values){\n  if(!values.email){\n      error.email = toast.error(\"Email Required...!\");\n  }else if(values.email.includes(\" \")){\n      error.email = toast.error(\"Wrong Email...!\")\n  }else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)){\n      error.email = toast.error(\"Invalid email address...!\")\n  }\n\n  return error;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}