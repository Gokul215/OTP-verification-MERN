{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\n//axios.defaults.baseURL = 'http://localhost:8080';\n\n/** Make API Requests */\n\n/** To get username from Token */\nexport async function getUsername() {\n  const token = localStorage.getItem('token');\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  let decode = jwt_decode(token);\n  return decode;\n}\n\n/** authenticate function */\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\n\n/** get User details */\nexport async function getUser(_ref) {\n  let {\n    username\n  } = _ref;\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password doesn't Match...!\"\n    };\n  }\n}\n\n/** register user function */\nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n\n    /** send email */\n    if (status === 201) {\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/** login function */\nexport async function verifyPassword(_ref2) {\n  let {\n    username,\n    password\n  } = _ref2;\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password doesn't Match...!\"\n    });\n  }\n}\n\n/** update user profile function */\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/api/updateuser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't Update Profile...!\"\n    });\n  }\n}\n\n/** generate OTP */\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/** verify OTP */\nexport async function verifyOTP(_ref3) {\n  let {\n    username,\n    code\n  } = _ref3;\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/** reset password */\nexport async function resetPassword(_ref4) {\n  let {\n    username,\n    password\n  } = _ref4;\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwt_decode","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","_ref","data","get","registerUser","credentials","msg","status","email","userEmail","text","resolve","verifyPassword","_ref2","password","updateUser","response","put","headers","generateOTP","code","params","subject","verifyOTP","_ref3","resetPassword","_ref4"],"sources":["/home/prakashgokul/Documents/mern/login app/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\n//axios.defaults.baseURL = 'http://localhost:8080';\n\n\n/** Make API Requests */\n\n\n/** To get username from Token */\nexport async function getUsername(){\n    const token = localStorage.getItem('token')\n    if(!token) return Promise.reject(\"Cannot find Token\");\n    let decode = jwt_decode(token)\n    return decode;\n}\n\n/** authenticate function */\nexport async function authenticate(username){\n    try {\n        return await axios.post('/api/authenticate', { username })\n    } catch (error) {\n        return { error : \"Username doesn't exist...!\"}\n    }\n}\n\n/** get User details */\nexport async function getUser({ username }){\n    try {\n        const { data } = await axios.get(`/api/user/${username}`);\n        return { data };\n    } catch (error) {\n        return { error : \"Password doesn't Match...!\"}\n    }\n}\n\n/** register user function */\nexport async function registerUser(credentials){\n    try {\n        const { data : { msg }, status } = await axios.post(`/api/register`, credentials);\n\n        let { username, email } = credentials;\n\n        /** send email */\n        if(status === 201){\n            await axios.post('/api/registerMail', { username, userEmail : email, text : msg})\n        }\n\n        return Promise.resolve(msg)\n    } catch (error) {\n        return Promise.reject({ error })\n    }\n}\n\n/** login function */\nexport async function verifyPassword({ username, password }){\n    try {\n        if(username){\n            const { data } = await axios.post('/api/login', { username, password })\n            return Promise.resolve({ data });\n        }\n    } catch (error) {\n        return Promise.reject({ error : \"Password doesn't Match...!\"})\n    }\n}\n\n/** update user profile function */\nexport async function updateUser(response){\n    try {\n        \n        const token = await localStorage.getItem('token');\n        const data = await axios.put('/api/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\n\n        return Promise.resolve({ data })\n    } catch (error) {\n        return Promise.reject({ error : \"Couldn't Update Profile...!\"})\n    }\n}\n\n/** generate OTP */\nexport async function generateOTP(username){\n    try {\n        const {data : { code }, status } = await axios.get('/api/generateOTP', { params : { username }});\n\n        // send mail with the OTP\n        if(status === 201){\n            let { data : { email }} = await getUser({ username });\n            let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n            await axios.post('/api/registerMail', { username, userEmail: email, text, subject : \"Password Recovery OTP\"})\n        }\n        return Promise.resolve(code);\n    } catch (error) {\n        return Promise.reject({ error });\n    }\n}\n\n/** verify OTP */\nexport async function verifyOTP({ username, code }){\n    try {\n       const { data, status } = await axios.get('/api/verifyOTP', { params : { username, code }})\n       return { data, status }\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\n/** reset password */\nexport async function resetPassword({ username, password }){\n    try {\n        const { data, status } = await axios.put('/api/resetPassword', { username, password });\n        return Promise.resolve({ data, status})\n    } catch (error) {\n        return Promise.reject({ error })\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}